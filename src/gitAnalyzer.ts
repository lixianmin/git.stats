import simpleGit, { SimpleGit } from 'simple-git';
import moment from 'moment';
import * as fs from 'fs';
import * as path from 'path';

export interface DailyStats {
    commits: number;
    insertions: number;
    deletions: number;
    files: number;
}

export interface AuthorStats {
    author: string;
    email: string;
    startDate: moment.Moment;
    endDate: moment.Moment;
    totalCommits: number;
    totalInsertions: number;
    totalDeletions: number;
    totalFiles: number;
    dailyStats: { [date: string]: DailyStats };
}

export interface GitAnalyzerConfig {
    excludePatterns: string[];  // 要排除的文件模式
}

export class GitContributionAnalyzer {
    private git: SimpleGit;
    private config: GitAnalyzerConfig;
    private repoPath: string = '';

    constructor(git: SimpleGit, config: Partial<GitAnalyzerConfig> = {}) {
        this.git = git;
        this.config = {
            excludePatterns: [
                '**/*.pb.go',      // Go protobuf
                '**/*.pb.js',      // JavaScript protobuf
                '**/*.pb.ts',      // TypeScript protobuf
                '**/*_pb2.py',     // Python protobuf v2
                '**/*_pb3.py',     // Python protobuf v3
                '**/generated/**', // 通用生成目录
                '**/*.pb.cs',      // C# protobuf
                ...(config.excludePatterns || [])
            ]
        };
    }

    private isProtobufGeneratedFile(filePath: string): boolean {
        console.log(`\nChecking file: ${filePath}`);

        // 检查文件路径是否包含protobuf目录
        if (filePath.includes('Protos/') || filePath.includes('Protos\\')) {
            console.log(`File is in Protos directory: ${filePath}`);
            // 对于C#文件，仍然检查内容以确认
            if (filePath.toLowerCase().endsWith('.cs')) {
                try {
                    console.log(`Reading C# file content: ${filePath}`);
                    const content = fs.readFileSync(filePath, 'utf8');
                    // 只读取前几行来判断
                    const firstFewLines = content.split('\n').slice(0, 5).join('\n');
                    console.log('First few lines:', firstFewLines);
                    
                    // 如果文件不存在，这里会抛出错误
                    return true;
                } catch (error) {
                    console.error(`Error reading C# file ${filePath}:`, error);
                    // 如果文件不存在，仍然基于路径判断
                    return true;
                }
            }
            return true;
        }

        // 检查文件是否存在
        if (!fs.existsSync(filePath)) {
            console.log(`File does not exist: ${filePath}`);
            return false;
        }

        // 对于C#文件，检查文件内容
        if (filePath.toLowerCase().endsWith('.cs')) {
            try {
                console.log(`Reading C# file content: ${filePath}`);
                const content = fs.readFileSync(filePath, 'utf8');
                const firstFewLines = content.split('\n').slice(0, 20).join('\n');
                
                // 检查是否包含protobuf生成文件的特征
                const markers = [
                    'Generated by the protocol buffer compiler',
                    '<auto-generated>',
                    'DO NOT EDIT',
                    'using pb = global::Google.Protobuf',
                    'using pbc = global::Google.Protobuf.Collections',
                    'namespace Google.Protobuf',
                    '#pragma warning disable'
                ];

                const isGenerated = markers.some(marker => firstFewLines.includes(marker));
                
                if (isGenerated) {
                    console.log(`Found protobuf generated C# file: ${filePath}`);
                    console.log('First few lines:', firstFewLines);
                }
                return isGenerated;
            } catch (error) {
                console.error(`Error reading C# file ${filePath}:`, error);
                return false;
            }
        }

        // 对于其他文件，使用文件名模式匹配
        const isExcluded = this.config.excludePatterns.some(pattern => {
            const regexPattern = pattern
                .replace(/\./g, '\\.')
                .replace(/\*\*/g, '.*')
                .replace(/\*/g, '[^/]*');
            const regex = new RegExp(regexPattern);
            const matches = regex.test(filePath);
            if (matches) {
                console.log(`File matches exclude pattern ${pattern}: ${filePath}`);
            }
            return matches;
        });

        return isExcluded;
    }

    private shouldIncludeFile(file: string): boolean {
        // 首先检查文件路径中是否包含Protos目录
        if (file.includes('Protos/') || file.includes('Protos\\')) {
            console.log(`Excluding file from Protos directory: ${file}`);
            return false;
        }

        const fullPath = path.join(this.repoPath, file);
        const shouldExclude = this.isProtobufGeneratedFile(fullPath);
        if (shouldExclude) {
            console.log(`Excluding generated file: ${file}`);
        }
        return !shouldExclude;
    }

    private async getLastCommitTime(): Promise<moment.Moment> {
        console.log('Getting last commit time...');
        try {
            // 使用 --pretty=format 来确保我们得到正确的日期格式
            const log = await this.git.log([
                '-1',  // 只获取最后一条提交
                '--pretty=format:%aI'  // ISO 8601 格式的作者日期
            ]);
            
            console.log('Last commit log:', log);
            
            // 由于我们使用了自定义格式，日期会直接在 log.latest.hash 中
            if (log && log.latest && log.latest.hash) {
                const dateStr = log.latest.hash.trim();
                const lastCommitTime = moment(dateStr);
                if (lastCommitTime.isValid()) {
                    console.log('Last commit time:', lastCommitTime.format('YYYY-MM-DD HH:mm:ss'));
                    return lastCommitTime;
                } else {
                    console.log('Invalid date format:', dateStr);
                }
            } else {
                console.log('No commit found or invalid log format:', log);
            }
        } catch (error) {
            console.error('Error getting last commit time:', error);
        }
        
        // 如果获取失败，返回当前时间
        const currentTime = moment();
        console.log('Using current time as fallback:', currentTime.format('YYYY-MM-DD HH:mm:ss'));
        return currentTime;
    }

    async getContributionStats(days: number = 7, startDateStr?: string, endDateStr?: string): Promise<{ [author: string]: AuthorStats }> {
        console.log(`Starting contribution analysis for the last ${days} days`);
        console.log(`Repository path: ${this.repoPath}`);
        console.log('Custom date range:', startDateStr, 'to', endDateStr);

        // 计算时间范围
        let endDate: moment.Moment;
        let startDate: moment.Moment;

        if (startDateStr && endDateStr) {
            // 使用自定义日期范围
            startDate = moment(startDateStr).startOf('day');
            endDate = moment(endDateStr).endOf('day');
            console.log('Using custom date range');
        } else {
            // 使用预设时间范围，从最后一次提交时间开始计算
            console.log('Using preset time range');
            endDate = await this.getLastCommitTime();
            if (!endDate.isValid()) {
                console.log('Invalid end date, using current time');
                endDate = moment();
            }
            console.log('End date (last commit):', endDate.format('YYYY-MM-DD HH:mm:ss'));
            
            // 从最后提交时间开始往前推
            startDate = endDate.clone().subtract(days - 1, 'days').startOf('day');
            console.log('Start date:', startDate.format('YYYY-MM-DD HH:mm:ss'));
            
            // 确保包含最后一天的所有提交
            endDate = endDate.clone().endOf('day');
            console.log('Adjusted end date:', endDate.format('YYYY-MM-DD HH:mm:ss'));
        }

        console.log(`Analyzing commits from ${startDate.format('YYYY-MM-DD HH:mm:ss')} to ${endDate.format('YYYY-MM-DD HH:mm:ss')}`);

        try {
            const logs = await this.git.log([
                '--all',                    // 获取所有分支
                '--no-merges',              // 不包括合并提交
                '--numstat',                // 获取更改统计
                '--date=iso-strict',        // ISO格式的日期
                '--pretty=format:commit %H%n%an%n%aI%n%s%n',  // 自定义输出格式
                '--since', startDate.format('YYYY-MM-DD HH:mm:ss'),  // 使用精确时间
                '--until', endDate.format('YYYY-MM-DD HH:mm:ss'),    // 使用精确时间
                '--invert-grep',            // 反向匹配，排除匹配的提交
                '--grep=^WIP',              // 排除 WIP 提交
                '--grep=^stash',            // 排除 stash 提交
                '--grep=^\\[STASH\\]',      // 排除 [STASH] 提交
                '--grep=^\\[stash\\]'       // 排除 [stash] 提交
            ]);

            if (!logs || !logs.all || logs.all.length === 0) {
                console.log('No commits found in the specified date range');
                return {};
            }

            console.log(`Found ${logs.all.length} commits in the date range`);

            const stats: { [author: string]: AuthorStats } = {};

            // 解析提交日志
            const content = logs.all[0].hash;
            const commits = content.split('\ncommit ');
            for (const commitBlock of commits) {
                if (!commitBlock.trim()) continue;

                const lines = commitBlock.split('\n');
                if (lines.length < 4) continue;  // 至少需要4行：hash, author, date, subject

                // 解析提交信息
                const hash = lines[0].trim();
                const author = lines[1].trim();
                const dateStr = lines[2].trim();
                const subject = lines[3].trim();

                // 跳过 stash 相关的提交
                if (author.toLowerCase().includes('stash') || 
                    subject.toLowerCase().includes('stash') || 
                    subject.startsWith('WIP') ||
                    subject.startsWith('[STASH]') ||
                    subject.startsWith('[stash]')) {
                    continue;
                }

                // Git ISO date format: YYYY-MM-DDTHH:mm:ssZ or YYYY-MM-DDTHH:mm:ss+HH:MM
                const date = moment(dateStr);
                if (!date.isValid()) {
                    continue;
                }

                // 初始化作者统计
                if (!stats[author]) {
                    stats[author] = {
                        author,
                        email: '',  // simple-git的log命令没有返回email
                        startDate,
                        endDate,
                        totalCommits: 0,
                        totalInsertions: 0,
                        totalDeletions: 0,
                        totalFiles: 0,
                        dailyStats: {}
                    };
                }

                // 初始化日期统计
                const dateKey = date.format('YYYY-MM-DD');
                if (!stats[author].dailyStats[dateKey]) {
                    stats[author].dailyStats[dateKey] = {
                        commits: 0,
                        insertions: 0,
                        deletions: 0,
                        files: 0
                    };
                }

                // 更新提交计数
                stats[author].totalCommits++;
                stats[author].dailyStats[dateKey].commits++;

                // 解析文件变更统计
                // 跳过提交信息的4行，后面都是文件统计
                for (let i = 4; i < lines.length; i++) {
                    const line = lines[i].trim();
                    if (!line) continue;

                    const [ins, del, file] = line.split('\t');
                    if (!file) continue;

                    // 检查是否应该包含此文件
                    if (!this.shouldIncludeFile(file)) {
                        console.log(`Skipping generated file in commit ${hash}: ${file}`);
                        continue;
                    }

                    // 解析插入和删除的行数
                    const insertions = ins === '-' ? 0 : parseInt(ins) || 0;
                    const deletions = del === '-' ? 0 : parseInt(del) || 0;

                    // 更新统计
                    stats[author].totalInsertions += insertions;
                    stats[author].totalDeletions += deletions;
                    stats[author].totalFiles++;

                    stats[author].dailyStats[dateKey].insertions += insertions;
                    stats[author].dailyStats[dateKey].deletions += deletions;
                    stats[author].dailyStats[dateKey].files++;
                }
            }

            // 在返回的 stats 对象中，需要确保包含整个日期范围
            for (const author in stats) {
                // 确保 startDate 和 endDate 被正确设置到返回的统计对象中
                stats[author].startDate = startDate;
                stats[author].endDate = endDate;
            }

            // 在返回统计之前，确保每个作者的统计数据包含完整的日期范围
            for (const author in stats) {
                const currentDate = startDate.clone();
                while (currentDate.isSameOrBefore(endDate, 'day')) {
                    const dateKey = currentDate.format('YYYY-MM-DD');
                    if (!stats[author].dailyStats[dateKey]) {
                        stats[author].dailyStats[dateKey] = {
                            commits: 0,
                            insertions: 0,
                            deletions: 0,
                            files: 0
                        };
                    }
                    currentDate.add(1, 'day');
                }
            }

            return stats;
        } catch (error) {
            console.error('Error analyzing git log:', error);
            throw error;
        }
    }

    async analyzeRepository(repoPath: string, startDate: moment.Moment, endDate: moment.Moment): Promise<{ [author: string]: AuthorStats }> {
        this.repoPath = repoPath;
        // console.log(`\n=== Starting repository analysis ===`);
        // console.log(`Repository path: ${repoPath}`);
        // console.log(`Date range: ${startDate.format('YYYY-MM-DD')} to ${endDate.format('YYYY-MM-DD')}`);

        const git = simpleGit(repoPath);
        const stats: { [author: string]: AuthorStats } = {};

        try {
            // 获取原始git log输出
            const result = await git.raw([
                'log',
                '--all',
                '--no-merges',
                '--numstat',
                '--format=commit:%H%nauthor:%aN%nemail:%aE%ndate:%aI'
            ]);

            // console.log('\n=== Git log output ===');

            // 按提交分割
            const commits = result.split('\ncommit:').filter(c => c.trim());
            // console.log(`Found ${commits.length} commits`);

            for (const commitData of commits) {
                const lines = commitData.trim().split('\n');
                let hash = '', author = '', email = '', dateStr = '';
                let currentSection = '';
                let insertions = 0, deletions = 0, filesChanged = 0;

                // 解析提交头部信息
                for (const line of lines) {
                    if (line.startsWith('author:')) {
                        author = line.substring(7).trim();
                        // console.log('Author:', author);
                    } else if (line.startsWith('email:')) {
                        email = line.substring(6).trim();
                    } else if (line.startsWith('date:')) {
                        dateStr = line.substring(5).trim();
                        // console.log('Date:', dateStr);
                    } else if (line.trim() && !line.startsWith('commit:')) {
                        // 解析文件统计
                        const parts = line.split('\t');
                        if (parts.length === 3) {
                            const [ins, dels] = parts;
                            const insCount = parseInt(ins) || 0;
                            const delCount = parseInt(dels) || 0;

                            insertions += insCount;
                            deletions += delCount;
                            filesChanged++;

                            // console.log(`File: ${parts[2]}, +${insCount} -${delCount}`);
                        }
                    }
                }

                // 解析日期
                const date = moment(dateStr);
                if (!date.isValid()) {
                    // console.warn(`Invalid date: ${dateStr}`);
                    continue;
                }

                // 检查日期范围
                if (date.isBefore(startDate) || date.isAfter(endDate)) {
                    // console.log(`Commit ${hash} outside date range (${date.format()} not in ${startDate.format()} - ${endDate.format()})`);
                    continue;
                }

                // console.log(`Changes: +${insertions} -${deletions} (${filesChanged} files)`);

                // 初始化作者统计
                if (!stats[author]) {
                    stats[author] = {
                        author,
                        email,
                        startDate,
                        endDate,
                        totalCommits: 0,
                        totalInsertions: 0,
                        totalDeletions: 0,
                        totalFiles: 0,
                        dailyStats: {}
                    };
                }

                // 初始化日期统计
                if (!stats[author].dailyStats[date.format('YYYY-MM-DD')]) {
                    stats[author].dailyStats[date.format('YYYY-MM-DD')] = {
                        commits: 0,
                        insertions: 0,
                        deletions: 0,
                        files: 0
                    };
                }

                // 更新统计
                const totalInsertions = insertions;
                const totalDeletions = deletions;
                const totalFiles = filesChanged;

                stats[author].totalCommits++;
                stats[author].totalInsertions += totalInsertions;
                stats[author].totalDeletions += totalDeletions;
                stats[author].totalFiles += totalFiles;

                stats[author].dailyStats[date.format('YYYY-MM-DD')].commits++;
                stats[author].dailyStats[date.format('YYYY-MM-DD')].insertions += totalInsertions;
                stats[author].dailyStats[date.format('YYYY-MM-DD')].deletions += totalDeletions;
                stats[author].dailyStats[date.format('YYYY-MM-DD')].files += totalFiles;
            }

            // console.log('\n=== Final Statistics ===');
            // for (const [author, authorStats] of Object.entries(stats)) {
            //     console.log(`\nAuthor: ${author}`);
            //     console.log(`Total commits: ${authorStats.totalCommits}`);
            //     console.log(`Total insertions: ${authorStats.totalInsertions}`);
            //     console.log(`Total deletions: ${authorStats.totalDeletions}`);
            //     console.log(`Total files: ${authorStats.totalFiles}`);
            //     console.log('Daily stats:', Object.keys(authorStats.dailyStats).length, 'days');
            // }

            return stats;

        } catch (error) {
            // console.error('Error analyzing repository:', error);
            throw error;
        }
    }

    private processCommitStats(
        commit: { hash: string; author: string; email: string; date: moment.Moment },
        fileStats: { insertions: number[]; deletions: number[] },
        stats: { [author: string]: AuthorStats },
        startDate: moment.Moment,
        endDate: moment.Moment
    ) {
        const { hash, author, email, date } = commit;

        // 检查日期范围
        const commitDate = date.clone().startOf('day');
        const rangeStart = moment.utc(startDate).startOf('day');
        const rangeEnd = moment.utc(endDate).endOf('day');

        if (commitDate.isBefore(rangeStart) || commitDate.isAfter(rangeEnd)) {
            // console.log(`Commit ${hash} outside date range (${commitDate.format()} not in ${rangeStart.format()} - ${rangeEnd.format()})`);
            return;
        }

        const dateKey = date.format('YYYY-MM-DD');

        // 初始化作者统计
        if (!stats[author]) {
            stats[author] = {
                author,
                email,
                startDate,
                endDate,
                totalCommits: 0,
                totalInsertions: 0,
                totalDeletions: 0,
                totalFiles: 0,
                dailyStats: {}
            };
        }

        // 初始化日期统计
        if (!stats[author].dailyStats[dateKey]) {
            stats[author].dailyStats[dateKey] = {
                commits: 0,
                insertions: 0,
                deletions: 0,
                files: 0
            };
        }

        // 更新统计
        const totalInsertions = fileStats.insertions.reduce((a, b) => a + b, 0);
        const totalDeletions = fileStats.deletions.reduce((a, b) => a + b, 0);
        const totalFiles = fileStats.insertions.length;

        stats[author].totalCommits++;
        stats[author].totalInsertions += totalInsertions;
        stats[author].totalDeletions += totalDeletions;
        stats[author].totalFiles += totalFiles;

        stats[author].dailyStats[dateKey].commits++;
        stats[author].dailyStats[dateKey].insertions += totalInsertions;
        stats[author].dailyStats[dateKey].deletions += totalDeletions;
        stats[author].dailyStats[dateKey].files += totalFiles;

        // console.log(`Processed commit ${hash}: +${totalInsertions} -${totalDeletions} (${totalFiles} files)`);
    }

    private parseNumstat(diff: string): { insertions: number; deletions: number; files: number } {
        const lines = diff.split('\n');
        let insertions = 0;
        let deletions = 0;
        let files = 0;

        for (const line of lines) {
            if (!line.trim()) continue;

            const [ins, dels] = line.split('\t');
            if (!ins || !dels) continue;

            insertions += ins === '-' ? 0 : parseInt(ins, 10) || 0;
            deletions += dels === '-' ? 0 : parseInt(dels, 10) || 0;
            files++;
        }

        return { insertions, deletions, files };
    }
}
